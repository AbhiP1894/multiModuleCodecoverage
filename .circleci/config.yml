# This config was automatically generated from your source code
# Stacks detected: deps:java:.
version: 2.1
jobs:
  test-java:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - run:
          name: Calculate cache key
          command: |-
            find . -name 'pom.xml' -o -name 'gradlew*' -o -name '*.gradle*' | \
                    sort | xargs cat > /tmp/CIRCLECI_CACHE_KEY
      - restore_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
      - run:
          command: mvn verify

      # Collect surefire reports for multi-module project
      - run:
          name: Collect surefire reports
          command: |
            mkdir -p /tmp/test-results
            echo "Finding surefire reports..."
            find . -type d -name surefire-reports -exec cp -r {} /tmp/test-results/ \;
            echo "Collected reports:"
            ls -R /tmp/test-results

      - run:
          name: List test reports for debugging
          command: ls -R /tmp/test-results

      - store_test_results:
          path: /tmp/test-results

      # Store code coverage reports
      - run:
          name: Collect Code Coverage Reports
          command: |
            mkdir -p /tmp/code-coverage
            echo "Finding code coverage reports..."
            find . -type d -name "jacoco-report" -exec cp -r {} /tmp/code-coverage/ \; || true
            echo "Collected code coverage reports:"
            ls -R /tmp/code-coverage

      - store_artifacts:
          path: /tmp/code-coverage  # Store the collected code coverage results
          destination: code-coverage  # Optional destination name in CircleCI

      - save_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
          paths:
            - ~/.m2/repository

  deploy:
    # This is an example deploy job, not actually used by the workflow
    docker:
      - image: cimg/base:stable
    steps:
      # Replace this with steps to deploy to users
      - run:
          name: deploy
          command: '#e.g. ./deploy.sh'

workflows:
  build-and-test:
    jobs:
      - test-java
    # - deploy:
    #     requires:
    #       - test-java
